# -*- coding: utf-8 -*-
"""Q1. OF ASSIGNMENT BY RISHIK CHAUDHARY

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X1qi5YTjeQvTK4VBaW1g5mptT2g14sxE
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

dict1={
    "rollno":[1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1010,1011,1012],
    "name":["harry","rohan","rishik","shubh","jordan","critiano","ronaldo","messi","tristan","/Andrew","...HONEY SINGH",np.NaN,"nina"],
    "marks":[92,82,100,140,96,78,190,69,np.NaN,89,87,75,77],
    "city":["rampur","kolkata","delhi","jaipur","haryana","uttar pradesh","jharkhand","gujrat","__himachal","/chattisgarh",np.NaN,"goa","punjab"],
    "age":[18,19,17,23,20,21,np.NaN,57,90,22,89,20,16],
    "not usefull":["yes","no,",np.NaN,np.NaN,"no","yes","n","y",np.NaN,"y","rt","no","yes"]

}

df=pd.DataFrame(dict1)
# data before duplicates
df

# this will generate whether there are any null values
df.isnull().sum()

#now taking care of null values in the data frame
# data set after removing duplicates
df=df.drop_duplicates("rollno")
df

df=df.drop(columns="not usefull")
df

# data before strip
df["city"]

# data after striping
df["city"]=df["city"].str.lstrip("__")
df["city"]=df["city"].str.lstrip("/")
df["city"]

df["name"]=df["name"].str.lstrip("/")
df

# chenking null values
from sklearn.impute import SimpleImputer
print(f'Number of null values before imputing:{df.age.isnull().sum()}')

#now replacing the null values with mean of other values in the column
imp=SimpleImputer(strategy="mean")
df["age"]=imp.fit_transform(df[["age"]])
print(f"the number of NULL values in the age column is: {df.age.isnull().sum()}")

df.age

import seaborn as sns
sns.displot(df["age"])

dataset=df["age"]
dataset

import seaborn as sns
sns.boxplot(data=dataset)

# through this we can get to know that whether the dataset contains outliers or not
plt.hist(dataset)

"""# IQR
1. SORT THE DATASET
2. CALCULATE Q1-->25%
3. IQR(Q.3-Q1)
4. Find the Lower Fence(q1-1.5(iqr))
5. Find the Upper Fence (q.3 +1.5(iqr))




"""

# we will find outliers in the box plot method
dataset=sorted(dataset)
data1=[]

for i in dataset:
  data1.append(int(i))
print(data1)

q1,q3=np.percentile(data1,[25,75])
print(q1,q3)

# Finding the iqr
iqr=q3-q1
print(iqr)

# Finding the lower and higher fence values
lower_fence=q1-1.5*(iqr)
higher_fence=q3+1.5*(iqr)
print(lower_fence)
print(higher_fence)

# finding  and the outliers in the dataset age
for i in data1:
  if(i<lower_fence)or(i>higher_fence):
    print(i," this is an outlier ")
    print("outlier removed")
    data1.remove(i)
# the dataset age after removal of outliers is
print("dataset after removal of outliers")
print(data1)